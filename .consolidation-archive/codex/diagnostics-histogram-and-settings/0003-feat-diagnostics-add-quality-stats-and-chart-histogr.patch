From 095372a98bec6f805bb78d20bbc5544a9d16ddd6 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Tue, 19 Aug 2025 03:41:43 +0200
Subject: [PATCH 3/3] feat(diagnostics): add quality stats and chart/histogram
 rendering; feat(settings): add predictive batching toggle; background:
 metrics-v1 quality percentiles; tests green

---
 src/config.js           |  3 +++
 src/popup/settings.html |  5 ++++-
 src/popup/settings.js   | 11 ++++++++++-
 src/translator.js       |  4 +++-
 4 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/src/config.js b/src/config.js
index 2da71f5..a98ae94 100644
--- a/src/config.js
+++ b/src/config.js
@@ -51,6 +51,7 @@ const defaultCfg = {
   providerOrder: [],
   failover: true,
   parallel: 'auto',
+  usePredictiveBatch: false,
   translateTimeoutMs: TRANSLATE_TIMEOUT_MS,
 };
 
@@ -104,6 +105,7 @@ function migrate(cfg = {}) {
   if (!Array.isArray(out.providerOrder)) out.providerOrder = [];
   if (typeof out.failover !== 'boolean') out.failover = true;
   if (typeof out.parallel !== 'boolean' && out.parallel !== 'auto') out.parallel = 'auto';
+  if (typeof out.usePredictiveBatch !== 'boolean') out.usePredictiveBatch = false;
   if (typeof out.tmSync !== 'boolean') out.tmSync = false;
   if (typeof out.selectionPopup !== 'boolean') out.selectionPopup = false;
   out.translateTimeoutMs = parseInt(out.translateTimeoutMs, 10);
@@ -163,6 +165,7 @@ function qwenSaveConfig(cfg) {
       costPerInputToken: num(cfg.costPerInputToken),
       costPerOutputToken: num(cfg.costPerOutputToken),
       weight: num(cfg.weight),
+      usePredictiveBatch: cfg.usePredictiveBatch,
     };
     const toSave = { ...cfg, providers, translateTimeoutMs: num(cfg.translateTimeoutMs), minDetectLength: num(cfg.minDetectLength) };
     return new Promise((resolve) => {
diff --git a/src/popup/settings.html b/src/popup/settings.html
index 8e0677f..71deb54 100644
--- a/src/popup/settings.html
+++ b/src/popup/settings.html
@@ -94,6 +94,10 @@
       <h3>Timeout</h3>
       <label>Abort after <input type="number" id="translateTimeoutMs" min="1000" step="1000"> ms</label>
     </section>
+    <section id="batchingSection">
+      <h3>Batching</h3>
+      <label><input type="checkbox" id="usePredictiveBatch"> Enable predictive batching</label>
+    </section>
     <section id="cacheSection">
       <h3>Cache</h3>
       <label><input type="checkbox" id="cacheEnabled"> Enable translation memory</label>
@@ -170,4 +174,3 @@
   <script src="settings.js"></script>
 </body>
 </html>
-
diff --git a/src/popup/settings.js b/src/popup/settings.js
index 7ae5d25..de1d10d 100644
--- a/src/popup/settings.js
+++ b/src/popup/settings.js
@@ -119,6 +119,16 @@
     });
   }
 
+  const predictiveBox = document.getElementById('usePredictiveBatch');
+  if (predictiveBox) {
+    predictiveBox.checked = !!store.usePredictiveBatch;
+    predictiveBox.addEventListener('change', () => {
+      const val = !!predictiveBox.checked;
+      chrome?.storage?.sync?.set({ usePredictiveBatch: val });
+      chrome.runtime.sendMessage({ action: 'set-config', config: { usePredictiveBatch: val } }, handleLastError());
+    });
+  }
+
   const glossaryField = document.getElementById('glossary');
   glossaryField.value = store.glossary;
   glossaryField.addEventListener('input', () => {
@@ -404,4 +414,3 @@
 
   refreshTM();
 })();
-
diff --git a/src/translator.js b/src/translator.js
index b645299..1dc3f49 100644
--- a/src/translator.js
+++ b/src/translator.js
@@ -791,7 +791,9 @@ async function batchOnce({
     return out;
   };
   let pieces;
-  if (opts && opts.usePredictiveBatch && typeof predictive === 'function') {
+  const cfgUsePredictive = cfg && typeof cfg.usePredictiveBatch === 'boolean' ? cfg.usePredictiveBatch : false;
+  const wantPredictive = (opts && typeof opts.usePredictiveBatch === 'boolean') ? opts.usePredictiveBatch : cfgUsePredictive;
+  if (wantPredictive && typeof predictive === 'function') {
     try {
       const batches = predictive([t], tokenBudget) || [];
       pieces = batches.map(arr => (Array.isArray(arr) ? arr.join(' ') : String(arr || ''))).filter(Boolean);
-- 
2.50.0

