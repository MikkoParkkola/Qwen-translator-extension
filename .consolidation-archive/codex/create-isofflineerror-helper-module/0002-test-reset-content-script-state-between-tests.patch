From dbe6f1fde724e2dba2c58ccad31b993304137189 Mon Sep 17 00:00:00 2001
From: MikkoParkkola <78788115+MikkoParkkola@users.noreply.github.com>
Date: Mon, 18 Aug 2025 09:00:10 +0200
Subject: [PATCH 2/9] test: reset content-script state between tests

---
 src/background.js          | 17 ++++++++++++++++-
 src/contentScript.js       | 21 +++++++++++++++++++--
 src/i18n/en.json           |  3 ++-
 src/i18n/zh.json           |  3 ++-
 test/contentScript.test.js |  5 +++--
 5 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/src/background.js b/src/background.js
index 6712a8b..5a8898c 100644
--- a/src/background.js
+++ b/src/background.js
@@ -71,6 +71,16 @@ function safeSendMessage(msg) {
   } catch {}
 }
 
+function isOfflineError(err) {
+  return (typeof navigator !== 'undefined' && navigator.onLine === false) ||
+    /network|fetch|offline/i.test((err && err.message) || '') ||
+    (err && err.code === 'ERR_NETWORK');
+}
+
+function notifyOffline() {
+  safeSendMessage({ action: 'offline' });
+}
+
 function calibrateLimits(force) {
   if (!self.qwenLimitDetector || !chrome?.storage?.sync) return;
   chrome.storage.sync.get({ apiEndpoint: '', model: '', requestLimit: 60, tokenLimit: 100000, calibratedAt: 0 }, async cfg => {
@@ -608,7 +618,12 @@ chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
   if (msg.action === 'translate') {
     handleTranslate(msg.opts)
       .then(sendResponse)
-      .catch(err => sendResponse({ error: err.message }));
+      .catch(err => {
+        if (isOfflineError(err)) {
+          try { chrome.runtime.sendMessage({ action: 'translation-status', status: { offline: true } }); } catch {}
+        }
+        sendResponse({ error: err.message });
+      });
     return true;
   }
   if (msg.action === 'ping') {
diff --git a/src/contentScript.js b/src/contentScript.js
index 88b1b13..9f72995 100644
--- a/src/contentScript.js
+++ b/src/contentScript.js
@@ -12,6 +12,7 @@ if (typeof window !== 'undefined' && window.__qwenCSLoaded) {
   const batchQueue = [];
   let processing = false;
   let statusTimer;
+  let statusSeq = 0;
   const pending = new Set();
   let flushTimer;
   const controllers = new Set();
@@ -120,12 +121,16 @@ function setStatus(message, isError = false) {
     chrome.runtime.sendMessage({ action: 'popup-status', text: message, error: isError }, handleLastError());
   } catch {}
   if (statusTimer) clearTimeout(statusTimer);
-  if (isError) statusTimer = setTimeout(clearStatus, 5000);
+  const seq = ++statusSeq;
+  if (isError) statusTimer = setTimeout(() => {
+    if (seq === statusSeq) clearStatus();
+  }, 5000);
 }
 
 function clearStatus() {
   const el = document.getElementById('qwen-status');
   if (el) el.remove();
+  statusTimer = null;
 }
 
 function updateProgressHud() {
@@ -152,6 +157,18 @@ function showError(message) {
   setStatus(message, true);
 }
 
+function isOfflineError(err) {
+  return (typeof navigator !== 'undefined' && navigator.onLine === false) ||
+    /network|fetch|offline/i.test((err && err.message) || '') ||
+    (err && err.code === 'ERR_NETWORK');
+}
+
+function showOffline() {
+  const msg = (window.qwenI18n && window.qwenI18n.t) ? window.qwenI18n.t('status.offline') : 'Offline';
+  setStatus(msg, true);
+  try { chrome.runtime.sendMessage({ action: 'offline', text: msg }, handleLastError()); } catch {}
+}
+
 function setupPrefetchObserver() {
   if (prefetchObserver !== undefined) return;
   if (typeof IntersectionObserver === 'undefined') {
@@ -591,8 +608,8 @@ async function processQueue() {
         } catch {}
       } else {
         showError(`${e.message}. See console for details.`);
+        logger.error('QTERROR: batch translation error', e && e.message, e);
       }
-      logger.error('QTERROR: batch translation error', e && e.message, e);
       item.enqueued = Date.now();
       batchQueue.push(item);
       await new Promise(r => setTimeout(r, 1000));
diff --git a/src/i18n/en.json b/src/i18n/en.json
index 5044d47..7a23819 100644
--- a/src/i18n/en.json
+++ b/src/i18n/en.json
@@ -11,5 +11,6 @@
   "bubble.ariaLabel": "Translation result",
   "bubble.offline": "Offline",
   "bubble.error": "Translation failed",
-  "popup.offline": "You appear to be offline"
+  "popup.offline": "You appear to be offline",
+  "status.offline": "Offline. Please check your connection."
 }
diff --git a/src/i18n/zh.json b/src/i18n/zh.json
index c521ebc..d6239f5 100644
--- a/src/i18n/zh.json
+++ b/src/i18n/zh.json
@@ -11,5 +11,6 @@
   "bubble.ariaLabel": "翻译结果",
   "bubble.offline": "离线",
   "bubble.error": "翻译失败",
-  "popup.offline": "当前处于离线状态"
+  "popup.offline": "当前处于离线状态",
+  "status.offline": "离线：请检查网络连接"
 }
diff --git a/test/contentScript.test.js b/test/contentScript.test.js
index f30c93e..6ea12f5 100644
--- a/test/contentScript.test.js
+++ b/test/contentScript.test.js
@@ -108,6 +108,7 @@ test('batches DOM nodes when exceeding token limit', async () => {
   messageListener({ action: 'start' });
   await jest.runOnlyPendingTimersAsync();
   expect(calls).toHaveBeenCalledTimes(4);
+  messageListener({ action: 'stop' });
   jest.useRealTimers();
   window.qwenTranslateBatch = original;
   delete window.qwenThrottle;
@@ -146,8 +147,9 @@ test('force translation bypasses cache', async () => {
   messageListener({ action: 'start', force: true });
   await jest.runOnlyPendingTimersAsync();
   expect(network.mock.calls.length).toBeGreaterThan(1);
+  messageListener({ action: 'stop' });
   jest.useRealTimers();
-window.qwenTranslateBatch = original;
+  window.qwenTranslateBatch = original;
 });
 
 test('passes provider config to batch translation', async () => {
@@ -262,4 +264,3 @@ test('translate-selection error uses localized message', async () => {
   const status = document.getElementById('qwen-status');
   expect(status.textContent).toBe('Qwen Translator: Localized fail: oops');
 });
-
-- 
2.50.0

